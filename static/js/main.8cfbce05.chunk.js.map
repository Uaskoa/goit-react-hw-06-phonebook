{"version":3,"sources":["redux/phonebook/phonebook-types.js","redux/phonebook/phonebooks-actions.js","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["name","number","type","actionTypes","payload","id","shortId","generate","contactId","value","connect","state","phonebook","filter","dispatch","onChange","e","phonebookActions","target","className","ContactForm","nameInputId","phoneInputId","handleNameChange","event","setState","currentTarget","handlePhoneChange","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","pattern","title","required","Component","ContactListItem","onDeleteContact","onClick","getFilteredContacts","allContacts","normalizedFilter","toLowerCase","contact","includes","items","contacts","map","App","combineReducers","rootReducer","phonebookReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cfbce05.chunk.js","sourcesContent":["//  const ADD = \"phonebook/Add\";\r\n//  const DELETE = \"phonebook/Delete\";\r\n//  const FILTER = \"phonebook/Filter\";\r\n\r\n export default {\r\n   ADD: \"phonebook/Add\",\r\n   DELETE: \"phonebook/Delete\",\r\n   FILTER: \"phonebook/Filter\",\r\n };\r\n\r\n","import shortId from 'shortid';\r\nimport actionTypes from './phonebook-types'\r\n\r\nconst addContact = ({name, number}) => (\r\n    {\r\n        type: actionTypes.ADD,\r\n        payload: {\r\n             id: shortId.generate(), \r\n             name, \r\n             number \r\n        }\r\n    }\r\n)\r\n\r\n\r\nconst deleteContact = (contactId) => (\r\n    {\r\n  type: actionTypes.DELETE,\r\n  payload: contactId,\r\n  })\r\n\r\n\r\n  const filter = (value) => ({\r\n    type: actionTypes.FILTER,\r\n    payload: value,\r\n  });\r\n\r\nexport default { addContact, deleteContact, filter };\r\n\r\n","import PropTypes from 'prop-types';\nimport {connect} from 'react-redux'\nimport phonebookActions from \"../../redux/phonebook/phonebooks-actions\";\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3>Find contacts by name</h3>\n    <input\n      type=\"text\"\n      className=\"input\"\n      value={value}\n      name=\"filter\"\n      onChange={onChange}\n    ></input>\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  value: state.phonebook.filter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (e) => dispatch(phonebookActions.filter(e.target.value)),\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport phonebookActions from \"../../redux/phonebook/phonebooks-actions\";\nimport shortId from \"shortid\";\nimport \"./ContactForm.scss\";\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  nameInputId = shortId.generate();\n  phoneInputId = shortId.generate();\n\n  handleNameChange = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handlePhoneChange = (event) => {\n    this.setState({ number: event.currentTarget.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form-label\" htmlFor={this.nameInputId}>\n          <span className=\"form-label-title\">Name</span>\n          <input\n            className=\"input\"\n            type=\"text\"\n            id={this.nameInputId}\n            value={this.state.name}\n            onChange={this.handleNameChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"form-label\" htmlFor={this.phoneInputId}>\n          <span className=\"form-label-title\">Number</span>\n          <input\n            className=\"input\"\n            type=\"tel\"\n            id={this.phoneInputId}\n            value={this.state.number}\n            name=\"number\"\n            onChange={this.handlePhoneChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n          <button className=\"form-button button\" type=\"submit\">\n            Add contact\n          </button>\n        </label>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(phonebookActions.addContact({ name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","\n// import { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\n\nimport \"./ContactList.scss\";\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => (\n  <li className=\"contact-list-item\">\n    <span className=\"contact-list-name\">{name} </span>\n    <span className=\"contact-list-number\">{number} </span>\n    <button\n      type=\"button\"\n      className=\"button\"\n      onClick={() => onDeleteContact(id)}\n    >\n      Delete\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\n\n// const mapStateToProps = (state) => ({\n//   contacts: state.phonebook.items,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onDeleteContact: () => null,\n// });\n\n\nexport default ContactListItem;\n","import { connect } from \"react-redux\";\nimport phonebookActions from \"../../redux/phonebook/phonebooks-actions\";\n\nimport ContactListItem from \"./ContactListItem\";\n\nimport \"./ContactList.scss\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className=\"contact-list\">\n    {contacts.map((contact) => (\n      <ContactListItem\n        id={contact.id}\n        key={contact.id}\n        name={contact.name}\n        number={contact.number}\n        onDeleteContact={onDeleteContact}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nconst getFilteredContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nconst mapStateToProps = ({phonebook: {items, filter}}) => ({\n  contacts: getFilteredContacts(items, filter),\n});\n\n\n// const mapStateToProps = (state) => ({\n//   contacts: getFilteredContacts(state.phonebook.items, state.phonebook.filter),\n// });\n\n// const mapStateToProps = (state) => {\n//   const { filter, items } = state.phonebook;\n//   const filteredContacts = getFilteredContacts(items, filter);\n//   return {\n//     contacts: filteredContacts,\n//   };\n// };\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (contactId) =>\n    dispatch(phonebookActions.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","// import { Component } from \"react\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\n// import shortId from 'shortid';\nimport \"./styles.css\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"phonebook\">\n          <h1>Phonebook</h1>\n          <ContactForm />\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   handleSearchChange = event => {\n//     this.setState({ filter: event.currentTarget.value });\n//   };\n\n//   formSubmitHandler = data => {\n//     const { name, number } = data;\n//     const normalizedName = name.toLowerCase();\n\n//     if (\n//       this.state.contacts.find(\n//         ({ name }) => name.toLowerCase() === normalizedName,\n//       )\n//     ) {\n//       return alert(`${name} is already in contacts.`);\n//     }\n\n//     this.setState(prevState => ({\n//       contacts: [\n//         ...prevState.contacts,\n//         { id: shortId.generate(), name, number },\n//       ],\n//     }));\n//   };\n\n//   getFilteredContacts = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   render() {\n//     const filteredContacts = this.getFilteredContacts();\n//     return (\n//       <div className=\"App\">\n//         <div className=\"container\">\n//           <div className=\"phonebook\">\n//             <h1>Phonebook</h1>\n//             <ContactForm\n//             onSubmit={this.formSubmitHandler}\n//             />\n//             <h2>Contacts</h2>\n//             <Filter\n//               value={this.state.filter}\n//               onChange={this.handleSearchChange}\n//             />\n//             <ContactList\n//               contacts={contacts}\n//               onDeleteContact={this.deleteContact}\n//             />\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import {combineReducers} from 'redux';\r\nimport actionTypes from './phonebook-types'\r\n\r\n\r\nconst items=(state=[], {type, payload}) => {\r\n  switch(type) {\r\ncase actionTypes.ADD:\r\n  return [...state, payload];\r\n\r\n\r\n    case actionTypes.DELETE:\r\n  return state.filter(contact => contact.id !== payload);\r\n\r\n    default: \r\n    return state;\r\n\r\n\r\n  }\r\n   \r\n}\r\n\r\nconst filter = (state = '', {type, payload}) => {\r\n    switch (type) {\r\n      case actionTypes.FILTER:\r\n        return payload;\r\n\r\n      default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter\r\n})","import { createStore, combineReducers } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport phonebookReducer from \"./phonebook/phonebook-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  phonebook: phonebookReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider} from 'react-redux';\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}