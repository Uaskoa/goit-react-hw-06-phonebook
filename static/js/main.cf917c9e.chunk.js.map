{"version":3,"sources":["redux/phonebook/phonebook-actions.js","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortId","generate","deleteContact","filter","connect","state","value","contacts","dispatch","onChange","e","phonebookActions","target","type","className","ContactForm","nameInputId","phoneInputId","handleNameChange","event","setState","currentTarget","handlePhoneChange","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","pattern","title","required","Component","ContactListItem","onDeleteContact","onClick","getFilteredContacts","allContacts","normalizedFilter","toLowerCase","contact","includes","items","contactId","map","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","rootReducer","persistReducer","phonebookReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.cf917c9e.chunk.js","sourcesContent":["import shortId from 'shortid';\r\nimport {createAction} from '@reduxjs/toolkit';\r\n// import actionTypes from './phonebook-types'\r\n\r\nconst addContact = createAction(\"contacts/Add\", ({ name, number }) => ({\r\n  payload: {\r\n    id: shortId.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\n\r\nconst deleteContact = createAction(\"contacts/Delete\");\r\nconst filter = createAction(\"contacts/Filter\");\r\n\r\n\r\n\r\n\r\nexport default { addContact, deleteContact, filter };\r\n\r\n\r\n// / WITHOUT REDUX TOOLKIT\r\n\r\n// import shortId from 'shortid';\r\n// import actionTypes from './phonebook-types'\r\n\r\n// const addContact = ({name, number}) => (\r\n//     {\r\n//         type: actionTypes.ADD,\r\n//         payload: {\r\n//              id: shortId.generate(), \r\n//              name, \r\n//              number \r\n//         }\r\n//     }\r\n// )\r\n\r\n\r\n// const deleteContact = (contactId) => (\r\n//     {\r\n//   type: actionTypes.DELETE,\r\n//   payload: contactId,\r\n//   })\r\n\r\n\r\n//   const filter = (value) => ({\r\n//     type: actionTypes.FILTER,\r\n//     payload: value,\r\n//   });\r\n\r\n\r\n\r\n// export default { addContact, deleteContact, filter };\r\n\r\n\r\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport phonebookActions from \"../../redux/phonebook/phonebook-actions\";\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3>Find contacts by name</h3>\n    <input\n      type=\"text\"\n      className=\"input\"\n      value={value}\n      name=\"filter\"\n      onChange={onChange}\n    ></input>\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (e) => dispatch(phonebookActions.filter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport phonebookActions from \"../../redux/phonebook/phonebook-actions\";\nimport shortId from \"shortid\";\nimport \"./ContactForm.scss\";\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  nameInputId = shortId.generate();\n  phoneInputId = shortId.generate();\n\n  handleNameChange = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handlePhoneChange = (event) => {\n    this.setState({ number: event.currentTarget.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form-label\" htmlFor={this.nameInputId}>\n          <span className=\"form-label-title\">Name</span>\n          <input\n            className=\"input\"\n            type=\"text\"\n            id={this.nameInputId}\n            value={this.state.name}\n            onChange={this.handleNameChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"form-label\" htmlFor={this.phoneInputId}>\n          <span className=\"form-label-title\">Number</span>\n          <input\n            className=\"input\"\n            type=\"tel\"\n            id={this.phoneInputId}\n            value={this.state.number}\n            name=\"number\"\n            onChange={this.handlePhoneChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n          <button className=\"form-button button\" type=\"submit\">\n            Add contact\n          </button>\n        </label>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(phonebookActions.addContact({ name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","// import { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport \"./ContactList.scss\";\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => (\n  <li className=\"contact-list-item\">\n    <span className=\"contact-list-name\">{name} </span>\n    <span className=\"contact-list-number\">{number} </span>\n    <button\n      type=\"button\"\n      className=\"button\"\n      onClick={() => onDeleteContact(id)}\n    >\n      Delete\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import { connect } from \"react-redux\";\nimport phonebookActions from \"../../redux/phonebook/phonebook-actions\";\n\nimport ContactListItem from \"./ContactListItem\";\n\nimport \"./ContactList.scss\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className=\"contact-list\">\n    {contacts.map((contact) => (\n      <ContactListItem\n        id={contact.id}\n        key={contact.id}\n        name={contact.name}\n        number={contact.number}\n        onDeleteContact={onDeleteContact}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nconst getFilteredContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getFilteredContacts(items, filter),\n});\n\n// const mapStateToProps = (state) => ({\n//   contacts: getFilteredContacts(state.phonebook.items, state.phonebook.filter),\n// });\n\n// const mapStateToProps = (state) => {\n//   const { filter, items } = state.phonebook;\n//   const filteredContacts = getFilteredContacts(items, filter);\n//   return {\n//     contacts: filteredContacts,\n//   };\n// };\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (contactId) =>\n    dispatch(phonebookActions.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","// import { Component } from \"react\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\n// import shortId from 'shortid';\nimport \"./styles.css\";\nimport \"./App.scss\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"phonebook\">\n          <h1>Phonebook</h1>\n          <ContactForm />\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   handleSearchChange = event => {\n//     this.setState({ filter: event.currentTarget.value });\n//   };\n\n//   formSubmitHandler = data => {\n//     const { name, number } = data;\n//     const normalizedName = name.toLowerCase();\n\n//     if (\n//       this.state.contacts.find(\n//         ({ name }) => name.toLowerCase() === normalizedName,\n//       )\n//     ) {\n//       return alert(`${name} is already in contacts.`);\n//     }\n\n//     this.setState(prevState => ({\n//       contacts: [\n//         ...prevState.contacts,\n//         { id: shortId.generate(), name, number },\n//       ],\n//     }));\n//   };\n\n//   getFilteredContacts = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   render() {\n//     const filteredContacts = this.getFilteredContacts();\n//     return (\n//       <div className=\"App\">\n//         <div className=\"container\">\n//           <div className=\"phonebook\">\n//             <h1>Phonebook</h1>\n//             <ContactForm\n//             onSubmit={this.formSubmitHandler}\n//             />\n//             <h2>Contacts</h2>\n//             <Filter\n//               value={this.state.filter}\n//               onChange={this.handleSearchChange}\n//             />\n//             <ContactList\n//               contacts={contacts}\n//               onDeleteContact={this.deleteContact}\n//             />\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import actionTypes from \"./phonebook-types\";\r\nimport actions from \"./phonebook-actions\";\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.filter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n///WITHOUT REDUX TOOLKIT\r\n// import {combineReducers} from 'redux';\r\n// import actionTypes from './phonebook-types'\r\n\r\n// const items=(state=[], {type, payload}) => {\r\n//   switch(type) {\r\n// case actionTypes.ADD:\r\n//   return [...state, payload];\r\n\r\n//     case actionTypes.DELETE:\r\n//   return state.filter(contact => contact.id !== payload);\r\n\r\n//     default:\r\n//     return state;\r\n\r\n//   }\r\n\r\n// }\r\n\r\n// const filter = (state = '', {type, payload}) => {\r\n//     switch (type) {\r\n//       case actionTypes.FILTER:\r\n//         return payload;\r\n\r\n//       default:\r\n//         return state;\r\n//     }\r\n// };\r\n\r\n// export default combineReducers({\r\n//     items,\r\n//     filter\r\n// })\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport phonebookReducer from \"./phonebook/phonebook-reducer\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\n\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n\r\n  logger,\r\n];\r\n\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: persistReducer(contactsPersistConfig, phonebookReducer),\r\n});\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n//// WITHOUT REDUX TOOLKIT\r\n// import { createStore, combineReducers } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import phonebookReducer from \"./phonebook/phonebook-reducer\";\r\n\r\n// const rootReducer = combineReducers({\r\n//   phonebook: phonebookReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider} from 'react-redux';\nimport {PersistGate} from 'redux-persist/integration/react'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n      <App />\n       </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}